12/18/17
-Able to use file beat functionally with logstash		
	-was able to load all different logs on the host audit.log,messages
	-understanding modules.d/xxx.yml files that can be used fo logs using defaults
	-understanding editing logs in filebeat.yml to enable different logs and seperating 
		indexing in logstash/conf.d/conf file
12/19/17
-Able to ingest bsil logs and splitting messages to one command at at time

	- type: log
  	enabled: true
     	- /etc/logstash/data/bsil_report.txt

	multiline.pattern: '^\-{81}'
	multiline.negate: true
	multiline.match: after
	multiline.flush_pattern: '^\-{81}'
	Visualization e.g message:="Error_Code_Word ............ 2014"
- Able to use logstash instead of file beat for multiline
		codec => multiline {
                pattern => "^\-{81}"
                negate => "true"
                what => "next"
Looked alittle bit at git and github
todo
Grok, error codes and add a error code field with error code int and description
12/19/17
Worked on Grok and adding error codes to .conf to manage bsil logs.

12/22/17
Was finally able to complete bsil grokking, extract operation flag ,synchs and passess..
now need to add error capturing, forgot about that.

Error recovery
logstash.outputs.elasticsearch] retrying failed action with response code: 403 ({"type"=>"cluster_block_exception", "reason"=>"blocked by: [FORBIDDEN/12/index read-only / allow delete (api)];"})


  PUT _settings
    {
    "index": {
    "blocks": {
    "read_only_allow_delete": "false"
    }
    }
    }
12/01/2017 00:00:04.587   bsp15138   BSIcmd   Seq=0   Type=1
MM/dd/yyyy HH:mm:ss.SSS
"timestamp" => "2016-03-14 23:05:04"
match => ["message", %{DATESTAMP:logstimestamp}]

date{

  match => [ "logstimestamp", "%{DATESTAMP}"]
  
}
01/02/2018
Took a while to parse out all the relevant bsil fields, still needs some fine tuning but will skip
that, more cosmetic than anything.



